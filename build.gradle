/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0.1/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java'
    id 'eclipse'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

def projectName ='lunar-util'
def projectDesc ='lunar util'
def projectGroupId ='com.darainfo'
def projectVersion ='0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

task initSourceFolders {
    sourceSets*.java.srcDirs*.each {
        if( !it.exists() ) {
            it.mkdirs()
        }
    }
    
    sourceSets*.resources.srcDirs*.each {
        if( !it.exists() ) {
            it.mkdirs()
        }
    }
}

def def_version = [
	junit : '5.2.0'
	,junitPlatform : '1.5.0'
	,lombok : '1.18.10'
]

dependencies {
   //junit
	testImplementation(
		 [ group: 'org.junit.jupiter' , name: 'junit-jupiter-api' , version: def_version.junit ]
		,[ group: 'org.junit.jupiter' , name: 'junit-jupiter-engine' , version: def_version.junit ]
		,[ group: 'org.junit.jupiter' , name: 'junit-jupiter-params' , version: def_version.junit ]
		,[ group: 'org.junit.vintage' , name: 'junit-vintage-engine' , version: def_version.junit ]
		
		,[ group: 'org.junit.platform' , name: 'junit-platform-launcher' , version: def_version.junitPlatform ]
		,[ group: 'org.junit.platform' , name: 'junit-platform-runner' , version: def_version.junitPlatform ]
	)
	
	annotationProcessor( [group: 'org.projectlombok' , name: 'lombok' , version: def_version.lombok])
	testAnnotationProcessor([group: 'org.projectlombok' , name: 'lombok' , version: def_version.lombok])
	implementation group: 'org.projectlombok' , name: 'lombok' , version: def_version.lombok
	
}

test {
    useJUnitPlatform()
}

task generateCode {
    doLast {
        println 'Generating some code...'
    }
}

task generateCustomConfig {
    doLast {
          println "Generating custom configuration..."
    }
}
	
eclipse { // 이클립스 project facets설정.
	//프로젝트를 가져 오거나 동기화
	synchronizationTasks generateCustomConfig
	
	// 자동 빌드
	autoBuildTasks generateCode
	
	classpath {
        defaultOutputDir = file("target-notused")
        file.whenMerged {
            entries.each { entry ->
                if (entry.kind == 'src' && entry.hasProperty('output')) {
                    entry.output = entry.output.replace('bin/', "target/")
                }
            }
        }
    }
}

// JAVA file compile charset
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

jar{
	archiveBaseName = projectName
	archiveVersion = projectVersion
	
	from ('src/main/java'){
		include '**/*.xml'
	}
	
	doLast {
		println("jar export path : " + archivePath.parent)
	}
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    options.tags = [ "fileName:a:head","desc:a:head" ,"date" ,"method"] // custom tag 
    options.addStringOption("locale","ko_KR");
    options.addStringOption("encoding","UTF-8");
    options.addStringOption("charset","UTF-8");
    options.addStringOption("docencoding","UTF-8");
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
